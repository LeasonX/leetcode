package io.leason;

import java.util.ArrayList;
import java.util.List;

/**
 * https://leetcode-cn.com/problems/self-dividing-numbers/description/
 * <p>
 * 自除数 是指可以被它包含的每一位数除尽的数。
 * <p>
 * 例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。
 * <p>
 * 还有，自除数不允许包含 0 。
 * <p>
 * 给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。
 * <p>
 * 示例 1： 输入： 上边界left = 1, 下边界right = 22 输出： [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
 * <p>
 * 注意： 每个输入参数的边界满足 1 <= left <= right <= 10000。
 */
public class LeetCode0728 {

    public List<Integer> selfDividingNumbers(int left, int right) {
//        int[] rsList = {
//                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22, 24, 30, 33, 36, 40, 44, 48, 50, 55, 60, 66, 70, 77,
//                80, 88, 90, 99, 100, 101, 102, 104, 105, 110, 111, 112, 115, 120, 122, 124, 126, 128, 132, 135, 140,
//                144, 150, 155, 162, 168, 175, 184, 200, 202, 204, 208, 210, 212, 216, 220, 222, 224, 240, 244, 248, 250,
//                264, 280, 288, 300, 303, 306, 312, 315, 324, 330, 333, 336, 360, 366, 384, 396, 400, 404, 408, 412, 420,
//                424, 432, 440, 444, 448, 480, 488, 500, 505, 510, 515, 520, 540, 550, 555, 600, 606, 612, 624, 630, 636,
//                648, 660, 666, 672, 700, 707, 728, 735, 770, 777, 784, 800, 808, 816, 824, 840, 848, 864, 880, 888, 900,
//                909, 936, 990, 999, 1000, 1001, 1002, 1004, 1005, 1008, 1010, 1011, 1012, 1015, 1020, 1022, 1024, 1026,
//                1032, 1035, 1040, 1044, 1048, 1050, 1055, 1062, 1071, 1080, 1088, 1100, 1101, 1102, 1104, 1105, 1110,
//                1111, 1112, 1113, 1115, 1116, 1120, 1122, 1124, 1128, 1131, 1140, 1144, 1150, 1155, 1164, 1176, 1184,
//                1197, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1220, 1222, 1224, 1230, 1236, 1240, 1244, 1248, 1250,
//                1260, 1266, 1280, 1288, 1296, 1302, 1305, 1311, 1320, 1326, 1332, 1335, 1344, 1350, 1362, 1368, 1395,
//                1400, 1404, 1408, 1412, 1416, 1420, 1424, 1440, 1444, 1448, 1464, 1480, 1488, 1500, 1505, 1510, 1515,
//                1520, 1530, 1540, 1550, 1555, 1560, 1575, 1602, 1608, 1620, 1626, 1632, 1644, 1650, 1662, 1680, 1692,
//                1701, 1715, 1722, 1750, 1764, 1771, 1800, 1808, 1824, 1840, 1848, 1880, 1888, 1926, 1935, 1944, 1962,
//                2000, 2002, 2004, 2008, 2010, 2012, 2016, 2020, 2022, 2024, 2040, 2044, 2048, 2050, 2064, 2072, 2080,
//                2088, 2100, 2102, 2104, 2106, 2110, 2112, 2120, 2122, 2124, 2128, 2130, 2136, 2140, 2144, 2150, 2160,
//                2166, 2170, 2184, 2196, 2200, 2202, 2204, 2208, 2210, 2212, 2220, 2222, 2224, 2226, 2232, 2240, 2244,
//                2248, 2250, 2262, 2280, 2288, 2304, 2310, 2316, 2322, 2328, 2340, 2364, 2400, 2404, 2408, 2412, 2420,
//                2424, 2436, 2440, 2444, 2448, 2460, 2480, 2488, 2500, 2510, 2520, 2540, 2550, 2604, 2610, 2616, 2622,
//                2640, 2664, 2688, 2702, 2730, 2744, 2772, 2800, 2808, 2824, 2832, 2840, 2848, 2880, 2888, 2916, 3000,
//                3003, 3006, 3012, 3015, 3024, 3030, 3033, 3036, 3048, 3060, 3066, 3096, 3102, 3105, 3111, 3120, 3126,
//                3132, 3135, 3144, 3150, 3162, 3168, 3171, 3195, 3204, 3210, 3216, 3222, 3240, 3264, 3276, 3288, 3300,
//                3303, 3306, 3312, 3315, 3324, 3330, 3333, 3336, 3339, 3360, 3366, 3384, 3393, 3408, 3420, 3432, 3444,
//                3480, 3492, 3510, 3540, 3555, 3570, 3600, 3606, 3612, 3624, 3630, 3636, 3648, 3660, 3666, 3690, 3717,
//                3816, 3840, 3864, 3888, 3906, 3915, 3924, 3933, 3960, 3996, 4000, 4004, 4008, 4012, 4020, 4024, 4032,
//                4040, 4044, 4048, 4080, 4088, 4100, 4104, 4112, 4116, 4120, 4124, 4128, 4140, 4144, 4164, 4172, 4184,
//                4200, 4204, 4208, 4212, 4220, 4224, 4236, 4240, 4244, 4248, 4260, 4280, 4288, 4320, 4332, 4344, 4368,
//                4392, 4400, 4404, 4408, 4412, 4416, 4420, 4424, 4440, 4444, 4448, 4464, 4480, 4488, 4500, 4520, 4540,
//                4560, 4608, 4620, 4632, 4644, 4680, 4704, 4800, 4808, 4824, 4840, 4848, 4872, 4880, 4888, 4896, 4932,
//                4968, 5000, 5005, 5010, 5015, 5020, 5040, 5050, 5055, 5075, 5080, 5100, 5105, 5110, 5115, 5120, 5130,
//                5140, 5150, 5155, 5160, 5200, 5210, 5220, 5240, 5250, 5280, 5310, 5340, 5355, 5400, 5420, 5440, 5460,
//                5480, 5500, 5505, 5510, 5515, 5520, 5535, 5540, 5550, 5555, 5610, 5640, 5670, 5705, 5740, 5775, 5800,
//                5840, 5880, 5940, 6000, 6006, 6012, 6024, 6030, 6036, 6048, 6060, 6066, 6102, 6120, 6126, 6132, 6144,
//                6150, 6162, 6168, 6192, 6204, 6210, 6216, 6222, 6240, 6264, 6288, 6300, 6306, 6312, 6324, 6330, 6336,
//                6360, 6366, 6384, 6390, 6408, 6420, 6432, 6444, 6480, 6510, 6540, 6600, 6606, 6612, 6624, 6630, 6636,
//                6648, 6660, 6666, 6696, 6720, 6762, 6816, 6840, 6864, 6888, 6912, 6930, 6966, 6984, 7000, 7007, 7035,
//                7070, 7077, 7105, 7112, 7119, 7140, 7175, 7210, 7224, 7266, 7280, 7350, 7371, 7420, 7448, 7476, 7560,
//                7602, 7644, 7700, 7707, 7728, 7770, 7777, 7784, 7840, 8000, 8008, 8016, 8024, 8040, 8048, 8064, 8080,
//                8088, 8104, 8112, 8120, 8128, 8136, 8144, 8160, 8184, 8200, 8208, 8224, 8232, 8240, 8248, 8280, 8288,
//                8304, 8328, 8400, 8408, 8424, 8440, 8448, 8480, 8488, 8496, 8520, 8616, 8640, 8664, 8688, 8736, 8800,
//                8808, 8824, 8832, 8840, 8848, 8880, 8888, 8928, 9000, 9009, 9036, 9072, 9090, 9099, 9126, 9135, 9144,
//                9162, 9216, 9288, 9306, 9315, 9324, 9333, 9360, 9396, 9432, 9540, 9612, 9630, 9648, 9666, 9702, 9864,
//                9900, 9909, 9936, 9990, 9999, 10000
//        };
//        List<Integer> rs = new ArrayList<>();
//        for (int r : rsList) {
//            if (r >= left && r <= right) {
//                rs.add(r);
//            } else if (r > right) {
//                break;
//            }
//        }
//        return rs;
        List<Integer> r = new ArrayList<>();
        int i = left;
        while (i <= right) {
            if (isSelfDividing(i)) {
                r.add(i);
            }
            i++;

        }
        return r;
    }

    public boolean isSelfDividing(int num) {
        boolean rs = true;
        String numStr = String.valueOf(num);
        for (char a : numStr.toCharArray()) {
            int anInt = Integer.parseInt(a + "");
            if (anInt == 0 || num % anInt != 0) {
                rs = false;
                break;
            }
        }
        return rs;
    }

}
